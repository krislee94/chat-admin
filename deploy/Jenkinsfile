pipeline {
  agent {
    kubernetes {
      inheritFrom 'nodejs base'
      containerTemplate {
        name 'nodejs'
        image 'node:18.12-alpine'
      }

    }

  }
  stages {
    stage('构建代码') {
      agent none
      steps {
        container('nodejs') {
          sh 'npm install && npm run build-test'
        }

      }
    }

    stage('构建镜像') {
      agent none
      steps {
        container('base') {
          withCredentials([usernamePassword(credentialsId : 'nexus' ,passwordVariable : 'PASSWORD' ,usernameVariable : 'USERNAME' ,)]) {
            sh 'docker login -u $USERNAME -p $PASSWORD $REGISTRY_ADDRESS'
          }

          sh 'docker build --no-cache=true -t $TAG_NAME:$VERSION -f deploy/Dockerfile ./'
        }

      }
    }

    stage('推送镜像') {
      agent none
      steps {
        container('base') {
          sh 'docker tag $TAG_NAME:$VERSION $REGISTRY_ADDRESS/$REGISTRY_NAMESPACE/$TAG_NAME:$VERSION'
          withCredentials([usernamePassword(credentialsId : 'nexus' ,passwordVariable : 'PASSWORD' ,usernameVariable : 'USERNAME' ,)]) {
            sh 'docker login -u $USERNAME -p $PASSWORD $REGISTRY_ADDRESS'
            sh 'docker push $REGISTRY_ADDRESS/$REGISTRY_NAMESPACE/$TAG_NAME:$VERSION'
          }

          sh 'echo 命令：docker pull $REGISTRY_NAMESPACE/$TAG_NAME:$VERSION'
          sh 'echo 仓库地址：https://nexus.cynray.com/#browse/browse:docker-hosted:v2/$REGISTRY_NAMESPACE/$TAG_NAME/tags/$VERSION'
        }

      }
    }

    stage('部署-测试环境') {
      agent none
      when {
        branch 'deploy-test'
      }
      steps {
        container('base') {
          withCredentials([kubeconfigContent(credentialsId : 'kubeconfig' ,variable : 'KUBECONFIG_CONTENT' ,)]) {
            sh '''mkdir ~/.kube
   echo "$KUBECONFIG_CONTENT" > ~/.kube/config
   kubectl rollout restart deployment $TAG_NAME -n $K8S_NAMESPACE'''
            sh '''curl --location --request POST \'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=4013feed-4a19-4020-aa23-a35ee097f6a5\' \\
   --header \'Content-Type: application/json\' \\
   --data \'{
           "msgtype": "markdown",
           "markdown": {
               "content": "测试环境：<font color=\\"green\\">\'$TAG_NAME\'</font> 部署完成!\\n
                > 快捷入口：[工作负载](http://kubesphere.cynray.com/clusters/default/projects/outsourcing-im/deployments/\'$TAG_NAME\'/resource-status)    [流水线](http://kubesphere.cynray.com/cynray/clusters/default/devops/outsourcing-imsn22m/pipelines/\'$TAG_NAME\'/activity)"
           }
       }\''''
          }

        }

      }
    }

  }
  environment {
    REGISTRY_ADDRESS = 'nexus.cynray.com:8082'
    REGISTRY_NAMESPACE = 'cynray/outsourcing/im/web'
    K8S_NAMESPACE = 'outsourcing-im'
    TAG_NAME = 'chat-admin'
    VERSION = '1.0.0-SNAPSHOT'
  }
}